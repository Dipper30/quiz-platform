CREATE TABLE
IF NOT EXISTS Users (
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	username VARCHAR ( 255 ),
	PASSWORD VARCHAR ( 255 ) 
);

CREATE TABLE
IF NOT EXISTS Quizzes (
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	title VARCHAR ( 255 ),# Quiz title
	tag VARCHAR ( 36 ),# Quiz tag, which will not be exposed to users. This field can be seen as a comment, eg 'tag quiz version1', 'quiz for new grads'.
	description VARCHAR ( 255 ),# descriptions for the Quiz
	total_points INT,# a positive integer, usually set to 10
	destroyed boolean NOT NULL,
	visible boolean NOT NULL,
	createdAt datetime,
	updatedAt datetime
);

CREATE TABLE
IF NOT EXISTS Sections (
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	title VARCHAR ( 255 ), # Section title
  quiz_id INT,
	destroyed boolean NOT NULL ,
	createdAt datetime,
	updatedAt datetime,
  FOREIGN KEY ( quiz_id ) REFERENCES Quizzes ( id ) 
);

CREATE TABLE
IF NOT EXISTS Domains (
	id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
	NAME VARCHAR ( 255 ) NOT NULL,
	seq INT,
	proportion INT NOT NULL,
	section_id INT NOT NULL,
	createdAt datetime,
	updatedAt datetime,
	FOREIGN KEY ( section_id ) REFERENCES Sections ( id ) 
);

CREATE TABLE
IF NOT EXISTS Parts (# eg. Python, R
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR ( 255 ),
	seq INT,
	destroyed boolean NOT NULL,
	description VARCHAR ( 255 ),
	domain_id INT NOT NULL,
	createdAt datetime,
	updatedAt datetime,
	FOREIGN KEY ( domain_id ) REFERENCES Domains ( id ) 
);

CREATE TABLE
IF NOT EXISTS PartChoices ( # eg. Python, R
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	description VARCHAR(255),
	show_sub boolean, # show sub questions if clicked
	seq INT, # sequence number eg: A B C
	part_id int NOT NULL,
	FOREIGN KEY (part_id) REFERENCES Parts (id)
);

CREATE TABLE
IF NOT EXISTS Recommendations (# eg. Python, R
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	show_under INT,# eg. 25 : show link if final score is lower than 25% of the total points
	link VARCHAR ( 255 ),
	part_id INT NOT NULL,
	FOREIGN KEY ( part_id ) REFERENCES Parts ( id ) 
);

CREATE TABLE
IF NOT EXISTS Questions (
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	description VARCHAR ( 1023 ) NOT NULL,# the problem descriptions
	seq INT,
	destroyed boolean, # indicates whether this question is destroyed, or whether it is visible for users
	is_multi boolean, # indicates if user can select more than one choices
	part_id INT,
	createdAt datetime,
	updatedAt datetime,
	FOREIGN KEY ( part_id ) REFERENCES Parts ( id ) 
);

CREATE TABLE
IF NOT EXISTS Choices (
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	description VARCHAR ( 255 ) NOT NULL,
	seq INT,# sequence number of the question, usually from 0 to 3
	question_id INT,# references a question id
	score INT NOT NULL,
	destroyed boolean,
	UNIQUE KEY ( seq, question_id ), # make sure sequence number is unique in the question
	FOREIGN KEY ( question_id ) REFERENCES Questions ( id ) 
);

CREATE TABLE
IF NOT EXISTS RelateQuestions (
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	question_id INT NOT NULL,
	partchoice_id INT NOT NULL,
	FOREIGN KEY ( question_id ) REFERENCES Questions ( id ),
	FOREIGN KEY ( partchoice_id ) REFERENCES PartChoices ( id ) 
);

CREATE TABLE
IF NOT EXISTS Histories (
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	quiz_id INT NOT NULL,
	createdAt datetime,
	updatedAt datetime,
	FOREIGN KEY ( quiz_id ) REFERENCES Quizzes ( id )
);

CREATE TABLE
IF NOT EXISTS Records (
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	history_id INT NOT NULL,
	question_id INT NOT NULL,
	choice_id VARCHAR(255),
	score INT,
	FOREIGN KEY ( history_id ) REFERENCES Histories ( id ),
	FOREIGN KEY ( question_id ) REFERENCES Questions ( id )
);

CREATE TABLE
IF NOT EXISTS PartRecords (
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	history_id INT NOT NULL,
	part_id INT NOT NULL,
	partchoice_id INT NOT NULL,
	FOREIGN KEY ( history_id ) REFERENCES Histories ( id ),
	FOREIGN KEY ( part_id ) REFERENCES Parts ( id ),
	FOREIGN KEY ( partchoice_id ) REFERENCES PartChoices ( id )
);




